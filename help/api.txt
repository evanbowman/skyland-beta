
 api.txt

 Describes all available
 SKYLAND API calls.

 Does not describe the
 SKYLAND lisp standard
 library.


o----------------------------o

 (achieve integer)

 Unlock achievement.


o----------------------------o

 (cargo island x y)

 Returns a string describing
 the contents of cargo-bay
 room at (x, y). Returns nil
 if the cargo-bay does not
 contain cargo. Raises a
 fatal error if the room at
 (x, y) is not a cargo bay.


o----------------------------o

 (cargo-set island x y value)

 Store string value in
 cargo-bay on island at
 (x, y). Maximum nineteen
 characters.


o----------------------------o

 (choice n)

 Returns a random number
 between 0 and n.


o----------------------------o

 (chr-new
   island
   x
   y
   mode-sym
   plist)

 Add character to island at
 (x, y). Returns a unique
 integer id.

 Note: plist should contain
 nil, or an association list
 of properties.

 Note: for historical
 reasons (need to support
 old save files), this
 function accepts zero in
 place of a property list.

 Example:
 '((rplc . 1))

 Available properties:
 'rplc: the character is a
 replicant.

 'race: the race of the
 character:
   0 - human
   1 - goblin
   2 - unused
   3 - unused

'icon: character artwork

o----------------------------o

 (chr-hp id hp)

 Set health of character by
 id.


o----------------------------o

 (chr-move
   island
   x
   y
   dest-x
   dest-y)

 Move character from (x, y)
 to (dest-x, dest-y).


o----------------------------o

 (chr-del island x y)

 Remove character from
 from slot (x, y).


o----------------------------o

 (chrs island)

 Returns a list describing
 all of the inhabitants of
 an island.


o----------------------------o

 (chr-slots island)

 Returns a list of coords
 into which a character can
 be inserted.


o----------------------------o

 (coins)

 Return the player's coin
 count.


o----------------------------o

 (coins-add integer)

 Add integer coins to the
 player's coint count.


o----------------------------o

 (coins-set integer)

 Override coin count.


o----------------------------o

 (configure-rooms config)

 See
 /scripts/config/rooms.lisp
 for usage.


o----------------------------o

 (construction-sites
  island
  room-size-x/y-pair)

 List all coordinates on
 island where room of size
 '(x . y) may be constructed.


o----------------------------o

 (dialog strings ...)

 Composes a dialog message
 from the list of input
 strings. The game will
 open a dialog box with the
 message next time it
 reaches a state where it
 can display dialog.


o----------------------------o

 (diff)

 Return an int representing
 the difficulty.


o----------------------------o

 (diff-set integer)

 Set the difficulty.


o----------------------------o

 (emit isle
       x1
       y1
       x2
       y2)

 Causes a given weapon at pos
 x1 y1 to emit its projectile,
 aimed at x2 y2, ignoring
 weapon reload timing.


o----------------------------o

 (eval-file path)

 Evaluate code in another
 script, given by path.


o----------------------------o

 (exit)

 Exit the current level.

 If you invoke (exit 1), then
 the level will exit
 immediately. (exit 2) shows
 the victory screen. (exit 3)
 shows the defeat screen.


o----------------------------o

 (island-configure
    island
    room-desc-list)

 Configure rooms for and
 island.


o----------------------------o

 (key-bind str symbol)

 While the game does not
 allow you to remap all of
 the buttons, SKYLAND
 allows you to press the
 start button and enter
 sequences of keys. To create
 a custom binding, specify
 a key sequence in str,
 along with a lisp symbol
 representing a callback
 function name.

 Key character codes:
 u: dpad-up
 d: dpad-down
 l: dpad-left
 r: dpad-right
 a: A
 b: B

 So:

 (key-bind "uulb" 'repl)

 Would launch a lisp repl
 after the user pressed
 up-up-left-B.


o----------------------------o

 (key-reset)

 Clear all existing bindings
 created by key-bind.


o----------------------------o

 (on-fadein)
 (on-converge)
 (on-dialog-accepted)
 (on-dialog-declined)
 (on-dialog-closed)
 (on-room-destroyed)

 A set of event functions,
 called by the engine for
 various scenarios. You may
 override any of these
 functions with custom
 behavior.

 NOTE: on-room-destroyed is
 somewhat costly to register
 a callback for. But better
 to provide it than not at
 all.


o----------------------------o

 (on-timeout
  milliseconds
  callback-sym)

 Invoke function bound to
 callback-sym after integer
 milliseconds have passed.


o----------------------------o

 (opponent) -> island

 Returns a reference to the
 opponent's island. NOTE:
 make sure that you've
 called opponent-init before
 trying to access the
 opponent.


o----------------------------o

 (opponent-generate integer)

 Allow the engine to
 generate a level. You lose
 the handcrafted feel, but
 still, it keeps the game
 feeling fresh.

 Integer argument
 undocumented. A sort of
 difficulty rating.


o----------------------------o

 (opponent-init
    terrain-size
    mode-sym)

 Create an island for the
 opponent, with
 terrain-size. See
 opponent-mode for
 description of mode-sym.


o----------------------------o

 (opponent-mode mode-sym)

 If mode sym is 'hostile,
 the opponent island will
 run a hostile AI algorithm,
 if the mode sym is
 'neutral, the opponent
 will not attack unless
 attacked by the player.


o----------------------------o

 (player) -> island

 Returns a reference to the
 player's island.


o----------------------------o

 (port mode)

 Configure serial port.
 Supported modes:

 1: serve a command line over
    uart, at 9600 baud.


o----------------------------o

 (push-menu menu-name-str params)

 Allows you to open up certain
 game menus. Multiple
 sequential push-menu calls
 will push requests to a
 queue, such that subsequent
 requests will be processed
 after the requested menu
 is closed.

 An additional parameter may
 be passed to push-menu for
 certain menus. See below:

 Builtin menu names:
 "ready", no params
 "item-shop", no params
 "glossary", room type symbol
 "repl", no params
 "construction", no params
 "qrcode", string to encode

 For example:
 (push-menu "glossary" '(hull))
 (push-menu "item-shop" '())

 etc. See scripts for details.

 You may also script custom
 menus. See
 /scripts/misc/gui/


o----------------------------o

 (qr-set island x y value)

 Populate a code block with
 text!


o----------------------------o

 (rcnt island name-sym)

 Return the number of room
 instances matching name-sym
 that're registered with the
 engine.


o----------------------------o

 (repl)

 The game will launch a repl
 the next time that it enters
 an idle state.


o----------------------------o

 (rooms island)

 Returns a list describing
 the rooms associated with
 island.


o----------------------------o

 (room-new island desc)

 Add a room to island,
 where desc is a list of
 (room-sym room-x room-y)


o----------------------------o

 (room-del island x y)

 Remove room room at x y from
 island.

o----------------------------o

 (room-mut island x y type-sym)

 Convert a room to a
 completely different type!
 See rooms.lisp for all of
 the type symbols.

 The converted room must have
 the same dimensions as the
 source room, or the game will
 raise a fatal error.


o----------------------------o

 (room-meta type-sym)

 Accessor for metadata
 describing a type of room.


o----------------------------o

 (sel-move island x y)

 Move the cursor to island:
 x, y.


o----------------------------o

 (sel-input
  room-sym
  msg
  callback)

 Opens up a selection prompt
 ingame, with string msg.
 When the user presses the A
 button, the game will invoke
 function callback with
 parameters island, x, y.

 If you pass a room name
 in argument zero, the engine
 will reject selections if
 there is there is less free
 space at the cursor
 coordinate than specified by
 the pair of x,y constraints.
 Pass nil if you don't care.

 For example:

(sel-input 'hull "pick a coord:"
 (lambda
  (syscall "log"
           (string
            "user entered "
            $0
            $1
            $2))))


o----------------------------o

 (sound "name")

 Play a sound effect.


o----------------------------o

 (flag-show island variant)

 Display a flag. For opponent
 islands only, you may pass
 an integer variant for
 alternate flag graphics to
 display. Otherwise, pass
 zero in the variant argument.


o----------------------------o

 (get-line-of-file path line)

 Retrieve a string containing
 a line of a file given by
 integer line, and path to
 file given by path.

 Added for localization
 purposes, currently unused.

 for example:

 (setq lang "/strings/english.txt")

 (defn locale-string
   (get-line-of-file lang $0))

o----------------------------o

 (groups)

 List weapon groups.

o----------------------------o

 (groups-reset)

 Clear weapon groups.

o----------------------------o

 (groups-add group x y)

 Add weapon at coords (x,y)
 to group specified by symbol
 group.


o----------------------------o

 (gui-add-node id type)

 Add a node to the gui tree.


o----------------------------o

 (gui-set-attr id name value)

 Assign an attribute in a
 gui element.


o----------------------------o

 (gui-delete-node id)

 Delete a gui node.


o----------------------------o

 (syscall string ...)

 Invoke a skyland engine
 system call. In addition to
 the standard lisp engine
 functions provided here,
 the engine provides a large
 number of low-level
 functions via syscall.

 See syscall.txt for
 documentation.


o----------------------------o

 (terrain island size)

 Sets the terrain size of
 island to size. If called
 without the size argument,
 returns terrain size of
 island.
 Negative sizes will result
 in islands with invisible
 terrain.

o----------------------------o

 (version)

 Return the engine version,
 as a list:

 '(major minor subminor patch)


o----------------------------o

 (wg-nodes)

 Get a list of all world
 graph nodes, i.e. nodes
 associated with the sky
 chart in adventure mode.

 Result in format:

 '((type x . y) ...)


o----------------------------o

 (wg-node-set x y type)

 Assign a world graph node.
 x y must be a valid existing
 node (see wg-nodes).


o----------------------------o

 (wg-node-move x1 y1 x2 y2)

 Relocate a world graph node
 to a new coordinate.

 Calling this function on the
 player's currently inhabited
 node is undefined behavior.


o----------------------------o

 (wg-pos)

 Return info about the
 player's position in the
 world graph:

 '(zone x . y)


o----------------------------o

