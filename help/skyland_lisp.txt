
  '(SKYLAND LISP)

 You may be wondering, why
 lisp? I never intended to
 write a lisp interpreter.
 
 I started out with a simple
 cheat system, where I could
 enter numeric codes to test
 certain behavior. But I
 couldn't remember any of the
 numeric codes, so I wrote a
 little command-prompt.
 
 Then often found myself
 wanting to write compound
 expressions, and lisp
 was the easiest thing to
 write a parser for. Over
 the years, the interpreter
 snowballed into a lexically-
 scoped scheme-inspired lisp
 with an optimizing bytecode
 compiler...


 Generally, you should refer
 to the existing game scripts
 for examples of how to use
 the engine's scripting
 language.

 SKYLAND LISP is a bit of a
 mix of scheme and common
 lisp.

 While I've greatly improved
 it over the years, I should
 mention a few of its
 remaining shortcomings:

 1) You may find some
 weirdness with the (read)
 function. Do not ever make
 any assumptions about the
 results of (read) based on
 your experience with other
 lisps. Engineering an
 efficient lisp that runs
 on a gameboy means that
 sometimes one needs to cut
 corners a bit.

 2) Following the above
 point about the problematic
 reader: macros. The reader
 eagerly expands macros,
 which normally isn't a
 problem, but it makes macro
 definition a bit of a puzzle
 in cases where macros
 contain other macros. Nested
 macros are supported, but
 there is definitely an
 ordering problem where one
 needs to be declared after
 the macro that references
 it.

 3) Capturing enclosing
 function parameters in a
 nested lambda is not
 supported, and will raise a
 fatal error. You can work
 around this by binding the
 vals to local vars with a
 let expression. I know it's
 annoying, but, with the way
 argument substition works,
 it would be fairly complex
 to support this.


 DATA TYPES:

 nil: The empty list.
 Represents the absence of
 a value.
 Evaluates to false.

 int: A signed 32 bit
 integer.

 cons: A pair of two values.

 function: A value containing
 re-usable code. Functions
 can be declared anonymously
 with the lambda keyword and
 live in the same namespace
 as other variables.

 error: Signals that an error
 occurred.

 symbol: A globally unique
 value containing text. All
 symbols with the same text
 will compare identically to
 one another. Symbol
 comparison is optimized and
 occurs in constant time.

 user_data: A place to store
 custom data when embedding
 this scripting language in
 another project.

 databuffer: A 2kb fixed
 size buffer, to be used in
 whatever way you want. A
 very low level datatype for
 when you want to interact
 with binary data. This is
 the only mutable datatype.

 string: It's a string.
 Encoded in utf-8.

 float: IEEE-754 floating
 point number.
 
 wrapped: A means of
 defining custom types.
 A wrapped object is packaged
 in a wrapper that limits the
 programmer's ability to see
 inside the wrapped data.

 For example:

 ;; The interpreter will look
 ;; in the environment for a
 ;; function called
 ;; -decorate-<type> when
 ;; printing a wrapped value.
 (defn -decorate-handle (h)
   (string (format "<handle:%>"
                   (unwrap h))))

 (setq temp (wrap 5 'handle))
 ; <handle:5>

 (type temp)
 ; 'handle

